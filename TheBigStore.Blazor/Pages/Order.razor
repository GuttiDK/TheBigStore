@page "/Order/{orderId:int}"

<section class="h-100 gradient-custom">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-lg-10 col-xl-8">
                <div class="card" style="border-radius: 10px;">
                    <div class="card-header px-4 py-5">
                        @if (OrderView.Customer != null)
                        {
                            <h5 class="text-muted mb-0">Thanks for your Order, <span class="text-primary">@OrderView.Customer.FirstName</span>!</h5>
                        }
                    </div>
                    <div class="card-body p-4">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <p class="lead fw-normal mb-0 text-primary">Details</p>
                            <p class="small text-muted mb-0">Order ID : @OrderView.Id</p>
                        </div>
                        <div class="card shadow-0 border mb-4">
                            <div class="card-body">
                                @if (OrderView.ItemOrders != null && OrderView.ItemOrders.Any())
                                {
                                    
                                
                                @foreach (var item in OrderView.ItemOrders)
                                {
                                    <div class="row">
                                        <div class="col-md-2">
                                            @if (item.Item.Image != null)
                                            {
                                                <img src="/Images/Items/@item.Item.Image.ImageUrl" class="img-fluid" alt="image">
                                            }
                                            else
                                            {
                                                <img src="/Images/Items/No_image_available.svg" class="img-fluid" alt="image">
                                            }
                                        </div>
                                        <div class="col-md-2 text-center d-flex justify-content-center align-items-center">
                                            <p class="text-muted mb-0">@item.Item.ItemName</p>
                                        </div>
                                        <div class="col-md-2 text-center d-flex justify-content-center align-items-center">
                                            <p class="text-muted mb-0 small">Qty: @item.Quantity</p>
                                        </div>
                                        <div class="col-md-2 text-center d-flex justify-content-center align-items-center">
                                            <p class="text-muted mb-0 small">@($"{item.Quantity * item.Item.Price:C}")</p>
                                        </div>
                                    </div>
                                    <hr class="mb-4" style="background-color: #e0e0e0; opacity: 1;">
                                    <div class="row d-flex align-items-center">
                                        <div class="col-md-2">
                                            <p class="text-muted mb-0 small">Track Status</p>
                                        </div>
                                        <div class="col-md-10">
                                            <div class="progress" style="height: 6px; border-radius: 16px;">
                                                <div class="progress-bar" role="progressbar"
                                                     style="width: @((int)item.Status*20)%; border-radius: 16px; background-color: #a8729a;" aria-valuenow="65"
                                                     aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                            <div class="d-flex justify-content-around mb-1" style="transform:translate(-3rem, 0rem)">
                                                <p class="text-muted mt-1 mb-0 small ms-xl-3">Recieved</p>
                                                <p class="text-muted mt-1 mb-0 small ms-xl-2">Pending</p>
                                                <p class="text-muted mt-1 mb-0 small ms-xl-2">Processing</p>
                                                <p class="text-muted mt-1 mb-0 small ms-xl-2">Shipped</p>
                                                <p class="text-muted mt-1 mb-0 small ms-xl-3">Delivered</p>
                                            </div>
                                        </div>
                                    </div>
                                }
                                }
                            </div>
                        </div>

                        <div class="d-flex justify-content-between pt-2">
                            <p class="fw-bold mb-0">Order Details</p>
                        </div>

                        <div class="d-flex justify-content-between pt-2">
                            <p class="text-muted mb-0">Order ID : @OrderView.Id</p>
                        </div>

                        <div class="d-flex justify-content-between">
                            <p class="text-muted mb-0">Order Date : @OrderView.OrderDate</p>
                        </div>

                    </div>
                    <div class="card-footer border-0 px-4 py-5"
                         style="background-color: dodgerblue; border-bottom-left-radius: 10px; border-bottom-right-radius: 10px;">
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@using TheBigStore.Blazor.Models
@using TheBigStore.Blazor.Service.Interfaces
@inject IOrderService _orderService

@code {
    [Parameter]
    public int orderId { get; set; }

    public TheBigStore.Blazor.Models.Order OrderView { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        OrderView = await _orderService.GetOrderByIdAsync(orderId);
    }
}